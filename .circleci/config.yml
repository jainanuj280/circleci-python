commands:
  open_tunnel:
    parameters:
      bastion_host:
        description: The hostname or IP of your jump host in exposed DMZ
        type: string
      bastion_public_key:
        default: ""
        description: 'The public key of the bastion host to ensure mutual trust.  Argument
          may be a value, ENV VAR name, or file path. If left empty `ssh keyscan <bastion_host>`
          will trust it dynamically. '
        type: string
      bastion_user:
        description: The username on your jump host in exposed DMZ that matches SSH
          keys provided
        type: string
      local_port:
        default: "443"
        description: The port to expose locally, most likely matches your target port
        type: string
      target_host:
        description: The hostname or IP of your target service on private network
        type: string
      target_port:
        default: "443"
        description: The port of your target service on private network
        type: string
    steps:
    - add_ssh_keys
    - when:
        condition: <<parameters.bastion_public_key>>
        steps:
        - run:
            command: "if [ ! -d ~/.ssh ];then\n  echo \"No .ssh folder exists, please
              add private keys to SSH Permissions in Project Config (UI)\"\n  exit
              1\nfi\n# the above step handled our private key, but we still need to
              trust the *public* key of the bastion host by adding them to known_hosts
              \nif [ -f \"<<parameters.bastion_public_key>>\" ];then\n  # parameter
              is file, cat it\n  KEY_VALUE=`cat <<parameters.bastion_public_key>>`\nelse\n
              \ #parameter is not file, assume variable or string, echo it\n  KEY_VALUE=`echo
              \"<<parameters.bastion_public_key>>\"`\nfi\necho \"<<parameters.bastion_host>>
              ${KEY_VALUE}\" >> ~/.ssh/known_hosts\n"
            name: Trust provided Public Key for <<parameters.bastion_host>>
    - unless:
        condition: <<parameters.bastion_public_key>>
        steps:
        - run:
            command: "if [ ! -d ~/.ssh ];then\n  echo \"No .ssh folder exists, please
              add private keys to SSH Permissions in Project Config (UI)\"\n  exit
              1\nfi\n# the above step handled our private key, but we still need to
              trust the *public* key of the bastion host by adding them to known_hosts
              \nssh-keyscan <<parameters.bastion_host>> >> ~/.ssh/known_hosts\n"
            name: Trust Public Key for <<parameters.bastion_host>> using keyscan
    - run:
        command: |
          ssh -4 -L <<parameters.local_port>>:<<parameters.target_host>>:<<parameters.target_port>> -Nf <<parameters.bastion_user>>@<<parameters.bastion_host>>
        name: Open Local Port Forwarding on <<parameters.local_port>> to <<parameters.target_host>>:<<parameters.target_port>>
          via <<parameters.bastion_host>>
description: Allows CircleCI builds to access private network services over a intermediate
  jump host using SSH port forwarding.
examples:
  explicit_value:
    description: The bastion host's public key can be declated explicitly, or pulled
      from an env var instead.
    usage:
      jobs:
        build:
          docker:
          - image: circleci/node:10
          steps:
          - checkout
          - dmz/open_tunnel:
              bastion_host: jump-host.domain
              bastion_public_key: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoY............
              bastion_user: ubuntu
              local_port: "9001"
              target_host: target-host.domain
              target_port: "80"
          - run: curl localhost:9001
      orbs:
        dmz: eddiewebb/dmz@volatile
      version: 2.1
  naive_trust:
    description: You can let `ssh-keyscan` ask the bastion host for its public key
      and trust that. **WARNING** this method is vulnerable to MITM attacks.
    usage:
      jobs:
        build:
          docker:
          - image: circleci/node:10
          steps:
          - checkout
          - dmz/open_tunnel:
              bastion_host: jump-host.domain
              bastion_user: ubuntu
              local_port: "9001"
              target_host: target-host.domain
              target_port: "80"
          - run: curl localhost:9001
      orbs:
        dmz: eddiewebb/dmz@volatile
      version: 2.1
  not_just_http:
    description: It doesnt have to be a web-server being accessed. You can access
      a remote SSH host through the intermediate, just add -p to ssh commands.
    usage:
      jobs:
        build:
          docker:
          - image: circleci/node:10
          steps:
          - checkout
          - dmz/open_tunnel:
              bastion_host: jump-host.domain
              bastion_public_key: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoY............
              bastion_user: ubuntu
              local_port: "9001"
              target_host: target-host.domain
              target_port: "22"
          - run: |
              ssh-keyscan -p 9022 localhost >> ~/.ssh/known_hosts  #not required if you also trust the both server's keys explicitly
              ssh ec2-user@localhost -p 9022 'whoami && hostname'
      orbs:
        dmz: eddiewebb/dmz@volatile
      version: 2.1
  providing_key_as_path:
    description: If the bastion host's public key is in the repository, you can point
      to the path to trust it.
    usage:
      jobs:
        build:
          docker:
          - image: circleci/node:10
          steps:
          - checkout
          - dmz/open_tunnel:
              bastion_host: jump-host.domain
              bastion_public_key: path/to/bastion.pub
              bastion_user: ubuntu
              local_port: "9001"
              target_host: target-host.domain
              target_port: "80"
          - run: curl localhost:9001
      orbs:
        dmz: eddiewebb/dmz@volatile
      version: 2.1
version: 2.1
